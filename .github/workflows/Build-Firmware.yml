name: AW1000-IPQ807X

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_SCRIPT: diy-part.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Kuala_Lumpur
  FILE_NAME: AW1000-IPQ807x

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Script Permissions
      run: |
        chmod +x $DIY_SCRIPT
        sed -i 's/\r$//' $DIY_SCRIPT

    - name: INIT Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /opt/ghc /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install rename time gn
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo rm -rf /workdir && sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir
        df -Th

    - name: Cache OpenWrt
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/dl
          /workdir/openwrt/build_dir/host
        key: openwrt-${{ runner.os }}-${{ hashFiles('.config') }}
        restore-keys: |
          openwrt-${{ runner.os }}
      continue-on-error: true

    - name: CGit Repository
      working-directory: /workdir
      run: |
        if [ -d "openwrt" ]; then rm -rf openwrt; fi
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Install Feeds
      run: |
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a -f -p symwrt
        ./scripts/feeds install -a -f -p luci-app-passwall luci-app-openclash

    - name: Custom Config
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        make defconfig || {
          [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$CONFIG_FILE ./.config
          make defconfig
        }

    - name: Download DL
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      continue-on-error: true

    - name: Analyze Compile Results
      run: |
        echo "Checking target config for Arcadyan AW1000 (IPQ807x):"
        grep -E "^CONFIG_TARGET_qualcommax_ipq807x_DEVICE_arcadyan_aw1000=y" openwrt/.config || echo "Target not found"
        find openwrt/bin -type f 2>/dev/null | sort || echo "No bin directory or files found"

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Debug Info
      run: |
        ls -la
        ls -la openwrt || echo "No openwrt directory"
        ls -la openwrt/bin || echo "No bin directory"
        find . -name "*.bin" -o -name "*.img" -o -name "*.gz" 2>/dev/null | grep -v "build_dir" || echo "No firmware files"
      continue-on-error: true

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        mkdir -p output/files
        if [ -d "openwrt/bin" ]; then
          mkdir -p output/files/bin
          find openwrt/bin -type f \( -name "*.bin" -o -name "*.img" -o -name "*.gz" -o -name "*.tar" \) | xargs -I {} cp {} output/files/ || echo "No firmware found"
        else
          echo "No bin directory found"
        fi
        if [ ! "$(find output/files -type f 2>/dev/null)" ]; then
          echo "This is a placeholder file. No firmware was built successfully." > output/files/placeholder.txt
        fi
        echo "FIRMWARE=$(pwd)/output/files" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/**/*

    - name: Push Tag
      id: tag
      run: |
        TIME=$(date +"%Y%m%d%H%M")
        echo "release_tag=$TIME" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Upload Files
      id: release
      uses: ncipollo/release-action@v1
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_NAME }}
        allowUpdates: true
        tag: ${{ steps.tag.outputs.release_tag || github.run_id }}
        commit: ${{ github.sha }}
        token: ${{ github.token }}
        body: |
          Arcadyan AW1000 (IPQ807x) OpenWrt firmware
          Build Date: ${{ env.FILE_DATE }}

          ### Hardware Specs
          - CPU: IPQ807x SoC
          - Flash/RAM: Based on device specs

          If this release only contains placeholder.txt, firmware was not built successfully.
        artifacts: ${{ env.FIRMWARE }}/*
        artifactErrorsFailBuild: false
      continue-on-error: true
